---
# Jenkins doesn't allow updates via CLI, though that is required before plugins
# can be installed via CLI. See: https://gist.github.com/rowan-m/1026918
- name: Create Jenkins updates folder.
  file:
    path: /var/lib/jenkins/updates
    owner: jenkins
    group: jenkins
    mode: 0755
    state: directory
  register: jenkins_plugins_folder_create

- name: Update Jenkins plugin data.
  shell: >
    curl -L https://updates.jenkins-ci.org/update-center.json | sed '1d;$d' > /var/lib/jenkins/updates/default.json
    creates=/var/lib/jenkins/updates/default.json

- name: Permissions for default.json updates info.
  file:
    path: /var/lib/jenkins/updates/default.json
    owner: jenkins
    group: jenkins
    mode: 0755
  when: jenkins_plugins_folder_create.changed

- stat: path={{ jenkins_admin_password_file }}
  register: adminpasswordfile

# install jenkins plugins using command line: jenkins-cli.jar
- name: Install Jenkins master plugins using password.
  command: >
    java -jar {{ jenkins_jar_location }} -s http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix | default('') }}/
    install-plugin {{ item }}
    --username {{ jenkins_admin_username }}
    --password {{ jenkins_admin_password }}
    creates=/var/lib/jenkins/plugins/{{ item }}.jpi
  with_items: "{{ jenkins_master_plugins }}"
  when: jenkins_admin_password != "" and is_master is defined and is_master

- name: Install Jenkins plugins using password.
  command: >
    java -jar {{ jenkins_jar_location }} -s http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix | default('') }}/
    install-plugin {{ item }}
    --username {{ jenkins_admin_username }}
    --password {{ jenkins_admin_password }}
    creates=/var/lib/jenkins/plugins/{{ item }}.jpi
  with_items: "{{ jenkins_plugins }}"
  when: jenkins_admin_password != ""
  notify: restart jenkins

- name: Install Jenkins plugins using password-file.
  command: >
    java -jar {{ jenkins_jar_location }} -s http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix | default('') }}/
    install-plugin {{ item }}
    --username {{ jenkins_admin_username }}
    --password-file {{ jenkins_admin_password_file }}
    creates=/var/lib/jenkins/plugins/{{ item }}.jpi
  with_items: "{{ jenkins_plugins }}"
  when: adminpasswordfile.stat.exists == True
  notify: restart jenkins


#########
# swarm #
#########

# start swarm on jenkins slaves
# https://wiki.jenkins-ci.org/display/JENKINS/Swarm+Plugin
# http://maven.jenkins-ci.org/content/repositories/releases/org/jenkins-ci/plugins/swarm-client/
# java -jar path/to/swarm-client-jar-with-dependencies.jar

- name: Creates swarm directory
  file: path={{ jenkins_swarm_path }} state=directory
  when: is_slave is defined and is_slave

- name: Get the swarm client jarfile from server.
  get_url:
    url: https://repo.jenkins-ci.org/releases/org/jenkins-ci/plugins/swarm-client/2.2/swarm-client-2.2-jar-with-dependencies.jar
    dest: "{{ jenkins_swarm_path }}/swarm-client-2.2.jar"
  register: swarm_jarfile_get
  until: "'OK' in swarm_jarfile_get.msg or 'file already exists' in swarm_jarfile_get.msg"
  retries: 5
  delay: 10
  when: is_slave is defined and is_slave
  # when:"'groupname' in group_names"


# configure plugins
- include: plugin-config.yml

